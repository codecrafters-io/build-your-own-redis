slug: "redis"
name: "Build your own Redis"
short_name: "Redis"
release_status: "live"

description_md: |-
  Redis is an in-memory data structure store often used as a database, cache, message broker and streaming engine. In this challenge
  you'll build your own Redis server that is capable of serving basic commands, reading RDB files and more.

  Along the way, you'll learn about TCP servers, the Redis Protocol and more.

short_description_md: |-
  Learn about TCP servers, the Redis protocol and more

completion_percentage: 30
concept_slugs: ["network-protocols", "tcp-overview"]

languages:
  - slug: "c"
  - slug: "clojure"
  - slug: "cpp"
  - slug: "crystal"
  - slug: "csharp"
  - slug: "elixir"
  - slug: "gleam"
  - slug: "go"
  - slug: "haskell"
  - slug: "java"
  - slug: "javascript"
  - slug: "kotlin"
  - slug: "ocaml"
  - slug: "odin"
  - slug: "php"
  - slug: "python"
  - slug: "ruby"
  - slug: "rust"
  - slug: "typescript"
  - slug: "scala"
  - slug: "swift"
    release_status: "alpha"
    alpha_tester_usernames: ["JWShroyer"]
  - slug: "zig"

marketing:
  difficulty: medium
  sample_extension_idea_title: "Persistence"
  sample_extension_idea_description: "A Redis server that can read and write .rdb files"
  testimonials:
    - author_name: "Charles Guo"
      author_description: "Software Engineer, Stripe"
      author_avatar: "https://codecrafters.io/images/external/testimonials/charles-guo.png"
      link: "https://github.com/shaldengeki"
      text: |-
        The Redis challenge was extremely fun. I ended up having to read the
        Redis Protocol specification doc pretty carefully in its entirety! The result
        felt like lightly-guided independent study, if that makes sense. (Which, again, was lots of fun)
    - author_name: "Patrick Burris"
      author_description: "Senior Software Developer, CenturyLink"
      author_avatar: "https://codecrafters.io/images/external/testimonials/patrick-burris.jpeg"
      link: "https://github.com/Jumballaya"
      text: |-
        I think the instant feedback right there in the git push is really cool.
        Didn't even know that was possible!

extensions:
  - slug: "lists"
    name: "Lists"
    description_markdown: |-
      In this challenge extension you'll add support for [Lists][redis-lists] to your Redis implementation.

      Along the way, you'll learn commands like [RPUSH][rpush-command], [LRANGE][lrange-command], and more.

      [redis-lists]: https://redis.io/docs/latest/develop/data-types/lists/
      [rpush-command]: https://redis.io/docs/latest/commands/rpush/
      [lrange-command]: https://redis.io/docs/latest/commands/lrange/

  - slug: "streams"
    name: "Streams"
    description_markdown: |-
      In this challenge extension you'll add support for the [Stream][redis-streams-data-type] data type to your Redis implementation.

      Along the way you'll learn about commands like [XADD][xadd-command], [XRANGE][xrange-command] and more.

      [redis-streams-data-type]: https://redis.io/docs/data-types/streams/
      [xadd-command]: https://redis.io/commands/xadd/
      [xrange-command]: https://redis.io/commands/xrange/

  - slug: "transactions"
    name: "Transactions"
    description_markdown: |-
      In this challenge extension you'll add support for [Transactions][redis-transactions] to your Redis implementation.

      Along the way, you'll learn about the [MULTI][multi-command], [EXEC][exec-command], and [DISCARD][discard-command] commands, as well as how Redis handles transactions atomically.

      [redis-transactions]: https://redis.io/docs/latest/develop/interact/transactions/
      [multi-command]: https://redis.io/commands/multi/
      [exec-command]: https://redis.io/commands/exec/
      [discard-command]: https://redis.io/commands/discard/

  - slug: "replication"
    name: "Replication"
    description_markdown: |
      In this challenge extension you'll add support for [Replication][redis-replication] to your Redis implementation.

      Along the way you'll learn about how Redis's leader-follower replication works, the [PSYNC][redis-psync-command] command and more.

      [redis-replication]: https://redis.io/docs/management/replication/
      [redis-psync-command]: https://redis.io/commands/psync/

  - slug: "persistence-rdb"
    name: "RDB Persistence"
    description_markdown: |
      In this challenge extension you'll add [persistence][redis-persistence] support to your Redis implementation.

      Along the way you'll learn about Redis's [RDB file format][rdb-file-format] and more.

      [redis-persistence]: https://redis.io/docs/manual/persistence/
      [rdb-file-format]: https://github.com/sripathikrishnan/redis-rdb-tools/blob/548b11ec3c81a603f5b321228d07a61a0b940159/docs/RDB_File_Format.textile

  - slug: "pub-sub"
    name: "Pub/Sub"
    description_markdown : |-
      In this challenge extension you'll add support for [Publish/Subscribe (Pub/Sub)][redis-pub-sub] to your Redis implementation.

      Along the way, you'll learn commands like [SUBSCRIBE][subscribe-command], [PUBLISH][publish-command], and more.

      [redis-pub-sub]: https://redis.io/docs/latest/develop/pubsub/
      [subscribe-command]: https://redis.io/docs/latest/commands/subscribe/
      [publish-command]: https://redis.io/docs/latest/commands/publish/

  - slug: "optimistic-locking"
    name: "Optimistic Locking"
    description_markdown: |
      In this challenge extension you'll add support for [Optimistic Locking][redis-optimistic-locking] to your Redis implementation.

      Along the way you'll learn about the [WATCH][watch-command] command and how it works in synergy with the `MULTI`, `EXEC`, and `DISCARD` commands to achieve optimistic locking.

      [redis-optimistic-locking]: https://redis.io/docs/latest/develop/using-commands/transactions/#cas
      [watch-command]: https://redis.io/docs/latest/commands/watch/

stages:
  - slug: "jm1"
    concept_slugs:
      [
        "network-protocols",
        "tcp-overview",
        "go-tcp-server",
        "rust-tcp-server",
        "python-tcp-server",
      ]
    name: "Bind to a port"
    difficulty: very_easy
    marketing_md: |-
      In this stage, you'll start a TCP server on port 6379, which is the
      default port that Redis uses.
    tester_source_code_url: "https://github.com/codecrafters-io/redis-tester/blob/a58b9d58b33870fe26a164c0e323f809275a7250/internal/test_bind.go#L11"

  - slug: "rg2"
    concept_slugs:
      [
        "network-protocols",
        "tcp-overview",
        "go-tcp-server",
        "rust-tcp-server",
        "python-tcp-server",
      ]
    name: "Respond to PING"
    difficulty: easy
    marketing_md: |
      In this stage, you'll respond to the
      [PING](https://redis.io/commands/ping) command. You'll use [the Redis
      protocol](https://redis.io/topics/protocol) to encode the reply.
    tester_source_code_url: "https://github.com/codecrafters-io/redis-tester/blob/a58b9d58b33870fe26a164c0e323f809275a7250/internal/test_ping_pong.go#L9"

  - slug: "wy1"
    concept_slugs:
      [
        "network-protocols",
        "tcp-overview",
        "go-tcp-server",
        "rust-tcp-server",
        "python-tcp-server",
      ]
    name: "Respond to multiple PINGs"
    difficulty: easy
    marketing_md: |-
      In this stage, you'll respond to multiple
      [PING](https://redis.io/commands/ping) commands sent by the same client.
    tester_source_code_url: "https://github.com/codecrafters-io/redis-tester/blob/a58b9d58b33870fe26a164c0e323f809275a7250/internal/test_ping_pong.go#L35"

  - slug: "zu2"
    concept_slugs:
      [
        "network-protocols",
        "tcp-overview",
        "go-tcp-server",
        "rust-tcp-server",
        "python-tcp-server",
      ]
    name: "Handle concurrent clients"
    difficulty: medium
    marketing_md: |-
      In this stage, you'll add support for multiple concurrent clients to your
      Redis server. To achieve this you'll use an [Event
      Loop](https://en.wikipedia.org/wiki/Event_loop),
      like the official Redis implementation does.
    tester_source_code_url: "https://github.com/codecrafters-io/redis-tester/blob/a58b9d58b33870fe26a164c0e323f809275a7250/internal/test_ping_pong.go#L56"

  - slug: "qq0"
    name: "Implement the ECHO command"
    difficulty: medium
    marketing_md: |-
      In this stage, you'll respond to the
      [ECHO](https://redis.io/commands/echo) command. You'll parse user input
      according to the [the Redis protocol
      specification](https://redis.io/topics/protocol).
    tester_source_code_url: "https://github.com/codecrafters-io/redis-tester/blob/a58b9d58b33870fe26a164c0e323f809275a7250/internal/test_echo.go#L11"

  - slug: "la7"
    name: "Implement the SET & GET commands"
    difficulty: medium
    marketing_md: |-
      In this stage, you'll need to implement the
      [SET](https://redis.io/commands/set) &
      [GET](https://redis.io/commands/get) commands.
    tester_source_code_url: "https://github.com/codecrafters-io/redis-tester/blob/a58b9d58b33870fe26a164c0e323f809275a7250/internal/test_get_set.go#L11"

  - slug: "yz1"
    name: "Expiry"
    difficulty: medium
    marketing_md: |-
      In this stage, you'll add support for setting a key with an expiry. The
      expiry is provided using the "PX" argument to the
      [SET](https://redis.io/commands/set) command.
    tester_source_code_url: "https://github.com/codecrafters-io/redis-tester/blob/master/internal/test_expiry.go"

  # Persistence

  - slug: "zg5"
    primary_extension_slug: "persistence-rdb"
    name: "RDB file config"
    difficulty: easy
    marketing_md: |
      In this stage, you'll add support for reading the config values related to where RDB files are stored. You'll implement the `CONFIG GET` command.

  - slug: "jz6"
    primary_extension_slug: "persistence-rdb"
    name: "Read a key"
    difficulty: medium
    marketing_md: |
      In this stage, you'll add support for reading a key from an RDB file that contains a single key-value pair. You'll do this by implementing the `KEYS *` command.

  - slug: "gc6"
    primary_extension_slug: "persistence-rdb"
    name: "Read a string value"
    difficulty: medium
    marketing_md: |
      In this stage, you'll add support for reading the value of a key from an RDB file that contains a single key-value pair.

  - slug: "jw4"
    primary_extension_slug: "persistence-rdb"
    name: "Read multiple keys"
    difficulty: medium
    marketing_md: |
      In this stage, you'll add support for reading multiple keys from an RDB file. You'll do this by extending the `KEYS *` command to support multiple keys.

  - slug: "dq3"
    primary_extension_slug: "persistence-rdb"
    name: "Read multiple string values"
    difficulty: medium
    marketing_md: |
      In this stage, you'll add support for reading multiple string values from an RDB file.

  - slug: "sm4"
    primary_extension_slug: "persistence-rdb"
    name: "Read value with expiry"
    difficulty: medium
    marketing_md: |
      In this stage, you'll add support for reading values that have an expiry set.

  # Replication

  - slug: "bw1"
    primary_extension_slug: "replication"
    name: "Configure listening port"
    difficulty: easy
    marketing_md: |
      In this stage, you'll add support for parsing the `--port` flag and starting Redis on a custom port.

  - slug: "ye5"
    primary_extension_slug: "replication"
    name: "The INFO command"
    difficulty: easy
    marketing_md: |
      In this stage, you'll add support for the INFO command on the master.

  - slug: "hc6"
    primary_extension_slug: "replication"
    name: "The INFO command on a replica"
    difficulty: medium
    marketing_md: |
      In this stage, you'll add support for the --replicaof arg and INFO command on the replica.

  - slug: "xc1"
    primary_extension_slug: "replication"
    name: "Initial replication ID and offset"
    difficulty: easy
    marketing_md: |
      In this stage, you'll add support for reading a key from an RDB file that contains a single key-value pair. You'll do this by implementing the `KEYS *` command.

  - slug: "gl7"
    primary_extension_slug: "replication"
    name: "Send handshake (1/3)"
    difficulty: easy
    marketing_md: |
      In this stage, you'll add support for starting the handshake from the Replica side.

  - slug: "eh4"
    primary_extension_slug: "replication"
    name: "Send handshake (2/3)"
    difficulty: easy
    marketing_md: |
      In this stage, you'll add support for continuing the handshake from the Replica side, by sending REPLCONF.

  - slug: "ju6"
    primary_extension_slug: "replication"
    name: "Send handshake (3/3)"
    difficulty: medium
    marketing_md: |
      In this stage, you'll add support for finishing the handshake from the Replica side, by sending PSYNC.

  - slug: "fj0"
    primary_extension_slug: "replication"
    name: "Receive handshake (1/2)"
    difficulty: easy
    marketing_md: |
      In this stage, you'll add support for starting the handshake from the master side, by accepting REPLCONF.

  - slug: "vm3"
    primary_extension_slug: "replication"
    name: "Receive handshake (2/2)"
    difficulty: easy
    marketing_md: |
      In this stage, you'll add support for accepting PSYNC, and starting a FULLRESYNC.

  - slug: "cf8"
    primary_extension_slug: "replication"
    name: "Empty RDB transfer"
    difficulty: easy
    marketing_md: |
      In this stage, you'll add support for sending an empty RDB file to the replica. This is part of the "full resynchronization" process.

  - slug: "zn8"
    primary_extension_slug: "replication"
    name: "Single-replica propagation"
    difficulty: medium
    marketing_md: |
      In this stage, you'll add support for finishing the sync handshake from the master side, by sending a RDB file.

  - slug: "hd5"
    primary_extension_slug: "replication"
    name: "Multi-replica propagation"
    difficulty: hard
    marketing_md: |
      In this stage, you'll complete your implementation of Redis replication.

  - slug: "yg4"
    primary_extension_slug: "replication"
    name: "Command processing"
    difficulty: hard
    marketing_md: |
      In this stage, you'll add support for processing commands received by the replica from the master.

  - slug: "xv6"
    primary_extension_slug: "replication"
    name: "ACKs with no commands"
    difficulty: easy
    marketing_md: |
      In this stage, you'll add support for returning an ACK back to master as a response to GETACK.

  - slug: "yd3"
    primary_extension_slug: "replication"
    name: "ACKs with commands"
    difficulty: medium
    marketing_md: |
      In this stage, you'll add support for returning an ACK back to master as a response to GETACK.

  - slug: "my8"
    primary_extension_slug: "replication"
    name: "WAIT with no replicas"
    difficulty: medium
    marketing_md: |
      In this stage, you'll start implementing the WAIT command on your master.

  - slug: "tu8"
    primary_extension_slug: "replication"
    name: "WAIT with no commands"
    difficulty: medium
    marketing_md: |
      In this stage, you'll continue implementing the WAIT command on your master.

  - slug: "na2"
    primary_extension_slug: "replication"
    name: "WAIT with multiple commands"
    difficulty: hard
    marketing_md: |
      In this stage, you'll finish implementing the WAIT command on your master.

  # Streams

  - slug: "cc3"
    primary_extension_slug: "streams"
    name: "The TYPE command"
    difficulty: easy
    marketing_md: |
      In this stage, you'll add support for the `TYPE` command.

  - slug: "cf6"
    primary_extension_slug: "streams"
    name: "Create a stream"
    difficulty: medium
    marketing_md: |
      In this stage, you'll add support for creating a [Redis stream](https://redis.io/docs/data-types/streams/) using the `XADD` command.

  - slug: "hq8"
    primary_extension_slug: "streams"
    name: "Validating entry IDs"
    difficulty: easy
    marketing_md: |
      In this stage, you'll enhance the `XADD` command by extending support for explicit IDs.

  - slug: "yh3"
    primary_extension_slug: "streams"
    name: "Partially auto-generated IDs"
    difficulty: medium
    marketing_md: |
      In this stage, you'll enhance the `XADD` command by adding the option to use `*` as the sequence number.

  - slug: "xu6"
    primary_extension_slug: "streams"
    name: "Fully auto-generated IDs"
    difficulty: medium
    marketing_md: |
      In this stage, you'll enhance the `XADD` command by adding the option to use `*` as the entry ID.

  - slug: "zx1"
    primary_extension_slug: "streams"
    name: "Query entries from stream"
    difficulty: medium
    marketing_md: |
      In this stage, you'll add support for querying data from a stream using the `XRANGE` command.

  - slug: "yp1"
    primary_extension_slug: "streams"
    name: "Query with -"
    difficulty: easy
    marketing_md: |
      In this stage, you'll extend support for `XRANGE` to allow querying using `-`.

  - slug: "fs1"
    primary_extension_slug: "streams"
    name: "Query with +"
    difficulty: easy
    marketing_md: |
      In this stage, you'll extend support for `XRANGE` to allow querying using `+`.

  - slug: "um0"
    primary_extension_slug: "streams"
    name: "Query single stream using XREAD"
    difficulty: medium
    marketing_md: |
      In this stage, you'll add support to querying a stream using the `XREAD` command.

  - slug: "ru9"
    primary_extension_slug: "streams"
    name: "Query multiple streams using XREAD"
    difficulty: medium
    marketing_md: |
      In this stage, you'll add extend support to `XREAD` to allow querying multiple streams.

  - slug: "bs1"
    primary_extension_slug: "streams"
    name: "Blocking reads"
    difficulty: hard
    marketing_md: |
      In this stage, you'll add extend support to `XREAD` to allow querying multiple streams.

  - slug: "hw1"
    primary_extension_slug: "streams"
    name: "Blocking reads without timeout"
    difficulty: medium
    marketing_md: |
      In this stage, you'll add extend support to `XREAD` to allow for the blocking command not timing out.

  - slug: "xu1"
    primary_extension_slug: "streams"
    name: "Blocking reads using $"
    difficulty: easy
    marketing_md: |
      In this stage, you'll add extend support to `XREAD` to allow for passing in `$` as the ID for a blocking command.

  # Transactions

  - slug: "si4"
    primary_extension_slug: "transactions"
    name: "The INCR command (1/3)"
    difficulty: easy
    marketing_md: |
      In this stage, you'll start implementing the INCR command.

  - slug: "lz8"
    primary_extension_slug: "transactions"
    name: "The INCR command (2/3)"
    difficulty: easy
    marketing_md: |
      In this stage, you'll continue implementing the INCR command.

  - slug: "mk1"
    primary_extension_slug: "transactions"
    name: "The INCR command (3/3)"
    difficulty: easy
    marketing_md: |
      In this stage, you'll finish implementing the INCR command.

  - slug: "pn0"
    primary_extension_slug: "transactions"
    name: "The MULTI command"
    difficulty: easy
    marketing_md: |
      In this stage, you'll implement the MULTI command.

  - slug: "lo4"
    primary_extension_slug: "transactions"
    name: "The EXEC command"
    difficulty: easy
    marketing_md: |
      In this stage, you'll start implementing the EXEC command.

  - slug: "we1"
    primary_extension_slug: "transactions"
    name: "Empty transaction"
    difficulty: hard
    marketing_md: |
      In this stage, you'll implement an empty transaction.

  - slug: "rs9"
    primary_extension_slug: "transactions"
    name: "Queueing commands"
    difficulty: medium
    marketing_md: |
      In this stage, you'll implement queueing commands to a transaction.

  - slug: "fy6"
    primary_extension_slug: "transactions"
    name: "Executing a transaction"
    difficulty: hard
    marketing_md: |
      In this stage, you'll implement executing a successful transaction.

  - slug: "rl9"
    primary_extension_slug: "transactions"
    name: "The DISCARD command"
    difficulty: easy
    marketing_md: |
      In this stage, you'll implement the DISCARD command.

  - slug: "sg9"
    primary_extension_slug: "transactions"
    name: "Failures within transactions"
    difficulty: medium
    marketing_md: |
      In this stage, you'll implement handling failures while executing a transaction.

  - slug: "jf8"
    primary_extension_slug: "transactions"
    name: "Multiple transactions"
    difficulty: medium
    marketing_md: |
      In this stage, you'll implement multiple concurrent transactions.

  # Lists
  - slug: "mh6"
    primary_extension_slug: "lists"
    name: "Create a list"
    difficulty: easy
    marketing_md: In this stage, you'll add support for creating a new list using the `RPUSH` command.

  - slug: "tn7"
    primary_extension_slug: "lists"
    name: "Append an element"
    difficulty: easy
    marketing_md: In this stage, you'll add support for `RPUSH` when a list already exists and a single element is being appended.

  - slug: "lx4"
    primary_extension_slug: "lists"
    name: "Append multiple elements"
    difficulty: easy
    marketing_md: In this stage, you'll add support for appending multiple elements in a single `RPUSH` command.

  - slug: "sf6"
    primary_extension_slug: "lists"
    name: "List elements (positive indexes)"
    difficulty: easy
    marketing_md: In this stage, you will add support for listing the elements of a list using the `LRANGE` command.

  - slug: "ri1"
    primary_extension_slug: "lists"
    name: "List elements (negative indexes)"
    difficulty: easy
    marketing_md: In this stage, you will add support for negative indexes for the `LRANGE` command.

  - slug: "gu5"
    primary_extension_slug: "lists"
    name: "Prepend elements"
    difficulty: easy
    marketing_md: In this stage, you'll add support for the `LPUSH` command, which prepends elements to a list.

  - slug: "fv6"
    primary_extension_slug: "lists"
    name: "Query list length"
    difficulty: easy
    marketing_md: In this stage, you'll add support for querying the length of a list using `LLEN`.

  - slug: "ef1"
    primary_extension_slug: "lists"
    name: "Remove an element"
    difficulty: easy
    marketing_md: In this stage, you'll implement support for removing a single element from the left using the `LPOP` command.

  - slug: "jp1"
    primary_extension_slug: "lists"
    name: "Remove multiple elements"
    difficulty: easy
    marketing_md: In this stage, you'll add support for removing multiple elements in a single `LPOP` command.

  - slug: "ec3"
    primary_extension_slug: "lists"
    name: "Blocking retrieval"
    difficulty: medium
    marketing_md: In this stage, you'll add support for the `BLPOP` command, which blocks until an element is available to be popped.

  - slug: "xj7"
    primary_extension_slug: "lists"
    name: "Blocking retrieval with timeout"
    difficulty: medium
    marketing_md: In this stage, you will add support for a non-zero timeout duration for the `BLPOP` command.

  # Pub-Sub
  - slug: "mx3"
    primary_extension_slug: "pub-sub"
    name: "Subscribe to a channel"
    difficulty: easy
    marketing_md: In this stage, you’ll add support for the `SUBSCRIBE` command.

  - slug: "zc8"
    primary_extension_slug: "pub-sub"
    name: "Subscribe to multiple channels"
    difficulty: easy
    marketing_md: In this stage, you'll add support for subscribing to multiple channels using the `SUBSCRIBE` command.

  - slug: "aw8"
    primary_extension_slug: "pub-sub"
    name: "Enter subscribed mode"
    difficulty: medium
    marketing_md: In this stage, you'll add support for marking a client as having entered Subscribed mode.

  - slug: "lf1"
    primary_extension_slug: "pub-sub"
    name: "PING in subscribed mode"
    difficulty: easy
    marketing_md: In this stage, you'll add support for responding to `PING` when a client is in subscribed mode.

  - slug: "hf2"
    primary_extension_slug: "pub-sub"
    name: "Publish a message"
    difficulty: easy
    marketing_md: In this stage, you'll add support for the `PUBLISH` command.

  - slug: "dn4"
    primary_extension_slug: "pub-sub"
    name: "Deliver messages"
    difficulty: hard
    marketing_md: In this stage, you will add support for delivering published messages to subscribed clients.

  - slug: "ze9"
    primary_extension_slug: "pub-sub"
    name: "Unsubscribe"
    difficulty: medium
    marketing_md: In this stage, you'll add support for the `UNSUBSCRIBE command`, which is used to unsubscribe from a channel.

  # Optimistic Locking
  - slug: "xj2"
    primary_extension_sug: "optimistic-locking"
    name: "Watch a key"
    difficuly: easy
    marketing_md: In this stage, you'll add support for the `WATCH` command.

  - slug: "zs3"
    primary_extension_sug: "optimistic-locking"
    name: "Disallow WATCH in a transaction"
    difficuly: easy
    marketing_md: In this stage, you'll add support for disallowing the `WATCH` command in a transaction.

  - slug: "qc8"
    primary_extension_slug: "optimistic-locking"
    name: "Fail EXEC after WATCH"
    difficulty: hard
    marketing_md: In this stage, you'll add support for failing transactions after a `WATCH` command is issued.

  - slug: "bu1"
    primary_extension_slug: "optimistic-locking"
    name: "Optimistic Locking"
    difficulty: medium
    marketing_md: In this stage, you'll add support for optimistic locking using the `WATCH` command.

  - slug: "al4"
    primary_extension_slug: "optimistic-locking"
    name: "Watch uninitialized keys"
    difficulty: easy
    marketing_md: In this stage, you'll add support for watching a non-existent key.

  - slug: "ew6"
    primary_extension_slug: "optimistic-locking"
    name: "Watch multiple keys"
    difficulty: easy
    marketing_md: In this stage, you'll add support for watching multiple keys.

  - slug: "mn2"
    primary_extension_slug: "optimistic-locking"
    name: "UNWATCH a key"
    difficulty: easy
    marketing_md: In this stage, you'll add support for the `UNWATCH` command.

  - slug: "au8"
    primary_extension_slug: "optimistic-locking"
    name: "Unwatch on EXEC"
    difficulty: easy
    marketing_md: In this stage, you'll add support clearing watched keys on `EXEC`.

  - slug: "vh1"
    primary_extension_slug: "optimistic-locking"
    name: "Unwatch on DISCARD"
    difficulty: easy
    marketing_md: In this stage, you'll add support clearing watched keys on `DISCARD`.