hints:
  - title_markdown: "How do I access the client's TCP connection?"
    body_markdown: |-
      This is returned by the [`accept()`](https://docs.python.org/3/library/socket.html#socket.socket.accept) method.

      ```python
      # The return value includes the client's connection (a `Socket` object) and the client's address (which we ignore)
      connection, _ = server_socket.accept()
      ```

      The above code uses `_` to ignore the second return value, which is the client's address (a tuple of the IP address and port number).

  - title_markdown: "How do I read the client's PING command?"
    body_markdown: |-
      Use the [`recv()`](https://docs.python.org/3/library/socket.html#socket.socket.recv) method to read the client's command:

      ```python
      # Read 14 bytes from the client's connection
      connection.recv(14)
      ```

      The PING command is 14 bytes long when encoded as RESP: `*1\r\n$4\r\nPING\r\n` (you'll learn about RESP in later stages).

  - title_markdown: "How do I send the response to the client?"
    body_markdown: |-
      Use the [`sendall()`](https://docs.python.org/3/library/socket.html#socket.socket.sendall) method on the client's connection for this:

      ```python
      # Send the response to the client
      connection.sendall(b"+PONG\r\n")
      ```

      - The above code uses `b` to convert the string to a [bytes object](https://docs.python.org/3/library/stdtypes.html#bytes).
      - `+PONG\r\n` is the string "PONG" encoded as a [RESP simple string](https://redis.io/docs/latest/develop/reference/protocol-spec/#simple-strings).
