hints:
  - title_markdown: "How do I access the client's TCP connection?"
    body_markdown: |-
      This is returned by the [`incoming()`](https://doc.rust-lang.org/std/net/struct.TcpListener.html#method.incoming) method.

      ```rust
      // The return value is an iterator that provides a sequence of `TcpStream` objects.
      for stream in listener.incoming()
      ```

      Each [`TcpStream`](https://doc.rust-lang.org/std/net/struct.TcpStream.html) represents an active connection from a client.

  - title_markdown: "How do I send a response to the client?"
    body_markdown: |-
      Use the [`write_all()`](https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all) method on the client's connection:

      ```rust
      // Send the response to the client
      stream.write_all(b"+PONG\r\n").unwrap();
      ```

      - The above code uses `b` to create a [byte string literal](https://doc.rust-lang.org/reference/tokens.html#byte-string-literals).
      - `+PONG\r\n` is the string "PONG" encoded as a [RESP simple string](https://redis.io/docs/latest/develop/reference/protocol-spec/#simple-strings).
      - To satisfy the Rust compiler, you also need to import the [Write](https://doc.rust-lang.org/std/io/trait.Write.html) trait and mark the TcpStream as [mutable](https://doc.rust-lang.org/book/ch03-01-variables-and-mutability.html) in order to use `write_all()`.
